//
//  day.swift
//  AdventOfCode2020
//
//  Created by Morgan Kan on 29/11/2020.
//

import Foundation

class Day18 : AoCDay {
    
    enum OpType {
        case Number, OpeningBrace, ClosingBrace, Add, Mult
    }
    
    struct Operand {
        let type : OpType
        let number : Int
    }
    
    func readInput( str: String ) -> [[Operand]] {
        var result = [[Operand]]()
        for row in str.components(separatedBy: "\n" ) {
            var currentEquation = [Operand]()
            for val in row {
                switch val {
                    case "(":
                        currentEquation.append( Operand(type: .OpeningBrace, number: 0) )
                    case ")":
                        currentEquation.append( Operand(type: .ClosingBrace, number: 0) )
                    case "+":
                        currentEquation.append( Operand(type: .Add, number: 0) )
                    case "*":
                        currentEquation.append( Operand(type: .Mult, number: 0) )
                    case " ":
                        break
                    default:
                        currentEquation.append( Operand(type: .Number, number: Int(String(val))!) )
                }
            }
            result.append(currentEquation)
        }
        return result
    }
    
    func evalExpression( equation: [Operand], useSimplePrec: Bool ) -> Int {
        var stack = [Int]()
        assert( equation[0].type == .Number )
        stack.append( equation[0].number )
        var index = 1
        while index < equation.count {
            if equation[index].type == .Add {
                let left = stack.removeLast()
                let right = equation[index+1].number
                stack.append( left + right )
                index += 1
            } else if (useSimplePrec && equation[index].type == .Mult) {
                let left = stack.removeLast()
                let right = equation[index+1].number
                stack.append( left * right )
                index += 1
            } else if equation[index].type == .Number {
                stack.append( equation[index].number )
            }
            index += 1
        }
        return stack.reduce(into: 1, {
            $0 *= $1
        })
    }
    
    func evalEquation(equation: [Operand], useSimplePrec: Bool, index: inout Int) -> Int {
        var simplified = [Operand]()
        while index < equation.count {
            var nextVal = 0
            if( equation[index].type == .ClosingBrace ) {
                index += 1
                return evalExpression( equation: simplified, useSimplePrec: useSimplePrec)
            } else if( equation[index].type == .Add || equation[index].type == .Mult) {
                simplified.append(equation[index])
                index += 1
                continue
            } else if equation[index].type == .OpeningBrace {
                index += 1
                nextVal = evalEquation(equation: equation, useSimplePrec: useSimplePrec, index: &index)
            } else {
                nextVal = equation[index].number
                index += 1
            }
            simplified.append( Operand(type: .Number, number: nextVal))
        } 
        
        return evalExpression( equation: simplified, useSimplePrec: useSimplePrec)
    }
    
    override func problem01()
    {
        let equations = readInput( str: input )
        var sumPartOne = 0
        var sumPartTwo = 0
        for row in equations {
            var index = 0
            sumPartOne += evalEquation( equation: row, useSimplePrec: true, index: &index )
            index = 0
            sumPartTwo += evalEquation( equation: row, useSimplePrec: false, index: &index ) 
        }
        print( sumPartOne )
        print( sumPartTwo )
    }
    
    let sampleInput = """
    2 * 3 + (4 * 5)
    5 + (8 * 3 + 9 + 3 * 4 * 3)
    5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
    ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
    """
    
    let input = """
    ((8 + 6 + 4 + 9 * 2 + 9) * 8 + 2 * (7 + 2 + 4 * 2 + 4) * 2 * 5) * 3
    3 * 8 * 2 + 9 * ((6 + 5 * 3) * 7 * 9 * 7 * 7) * (7 * 4 + 5 + 8 * 8)
    9 + (5 * 5 + 2 + (5 * 2 + 6 * 9 * 3 + 6) * 4) + 3 * 5
    6 + (8 * 5 * 3 + 9 + 3 * 4) + 9 + 3 * 3
    (8 + 8 * 4 + 3 + 6) + (4 + 3 * 7 + 7 + 4 + 2) + 7 + (3 + (2 * 8 + 7 + 7) * 7 + 5 * (3 * 2 + 9 + 2 + 8 + 7) * (4 + 2 + 8))
    7 + 6 + (9 * 8 * 7 * 3) + (4 + 5 * (2 * 8 * 2 * 5 + 4) + (2 + 8 + 4 * 3 + 3) * (6 * 6 * 7 + 4 * 2 * 7)) * 6 + 9
    9 + 7 * ((8 * 3 * 4 * 4 + 8) + 2 * 8 + 6 * 4)
    (4 + 6 + (4 * 4 + 2 * 7 + 3) * 7) * 6 * (8 + (7 * 7) + 3)
    (8 + 5 * (4 * 5 + 9) * (3 + 3 + 9 * 6) * 8 + 8) * 9
    5 * 4 * 8 * (4 * 2 + 2 * 3 + 6 + (3 * 6 * 9 * 9 * 8)) + 4
    2 + 4 + ((2 * 3 * 4 * 7 * 3) + 5) + 4
    (6 * 9 + 2 * 9) + 4
    3 + 9 + 2 + (8 + 2 * 8 * 4 * 9) + 2 * 6
    9 + (3 + 6 + (3 * 6 * 5 * 2 + 5)) * (9 * 7 * 4 * 6 * 2) + 4 + (7 + 7 + 8 + 5 * 8) * (4 * (3 * 5 + 2))
    (8 * (7 + 4) + 8) * 6
    (8 * 3 + (4 * 8 + 9 + 6) * 2) * 4 * (5 * 2 * (9 + 8 * 3 * 2 * 7 + 2) + 3)
    (3 + 9 + 2) * 2 + 9 + 4 * 8 * 5
    9 + (2 + 7 * 7 * (4 * 3 * 6) * 2) + 6
    ((6 * 3) + (9 * 9 + 5 + 2) + 4 + 9 + 8 * (8 * 3 + 5 * 7 + 5)) * 4 * 2 * 4 + 3 * 2
    9 * 4 + 9 * (4 * 9 + 7) + 2
    (3 + 6 + 4) + 4 + 8 + 9 * (6 + 4 * (2 + 6 + 6)) * 6
    (5 + 8 * 9 * (7 + 3 + 4 + 2) * 3 + (3 + 4 + 7 + 9)) * 4 + (7 + 6) * 3 + 3
    7 * 3 + 8 + 3 * (2 + 2) + ((7 * 2) * 5)
    5 * 5 * 7 * (3 * 6 + 9 + 7)
    7 * 7 + 4
    4 + 9 * (8 + 6) * 2
    (8 * 3 * 8 + 3 + 4 + 5) * 4 * 5 * 6 + (2 + 5 * 4 + 6 * 3)
    ((2 + 4 * 9 + 4 * 9 * 7) + (9 * 5)) + 2 + 7 * (2 * 6) + (4 + 3)
    5 * 5 + (2 * 9 * (4 * 2 + 4 + 9) * (5 * 4) * 2 * 4)
    (8 + 2 * 3 + 7 * (6 + 9) * 6) + 5 + (4 * 2 * 3 + 8 + 5) + 8 * 6 * 6
    6 + (7 * (8 + 7 + 2 * 2) * 8 * 5 * 7 + 3) + (9 + 9) + (6 + 8)
    9 + ((5 + 8) * (5 + 5 + 8) + 7)
    2 * 7 + (7 + 4 * (9 + 2 * 5 * 2)) + (9 + (7 + 9) * 6 + 8) * 7 + 4
    4 * 3 * 9 * 8 * (6 + 8 * 3 * 2 + 7 + 6) * 4
    (9 + 6 + 8) * 8 * 5 + ((5 + 4 * 5 * 5) * 6 + 3 + 6 * 6 * 4)
    ((3 + 7 * 7 * 3) * 9 * (9 * 6 + 7 + 6 * 8 + 3) + 7) + 4 + 3 + 2 + 7
    5 + 8 * ((4 + 6 + 8 * 9 * 3 + 9) + (4 * 7 + 5 * 3 * 3) + 9) * 2 * 9
    2 * (8 * 5 * 2 * 5) * 6 + (4 * (9 * 3 + 9) * 4 * 6)
    4 * 6 + 4 + (5 * 6 + (9 * 3 + 2 + 3 + 6) + 3 + 9 + 7)
    (5 + 3 + 7 + 7 + 7) + 7 * 3 + 2 * 4
    (3 * 2 * 9) + (4 * 8 * 9)
    7 + 4 * 6 * (7 + 6 * 3 + (9 * 7 * 6 + 8 * 6 + 2) * 3 + 9)
    8 + 6 + (3 + 7) * (4 * 8 * 2) + 8
    6 + (3 * 7 + 4) * 8 + 3 + (3 + 6 * 4 + 3) + (2 + 9 + 9 + 3)
    4 * 8 * 7 * (7 * 3 * 7)
    (4 + (4 * 4 * 8 * 5) * (4 * 2 + 8 * 7)) * ((5 * 3 * 7 + 2 + 9) + 7) * 4 + 6 + 5 * 9
    5 * 7 + 9 + (2 * 9 + 6 + 9 + (6 * 6 + 5 * 4 + 3) + (2 + 7 + 7)) + 9 + (8 + 3 * 3 + 7 * 7 + 6)
    9 * 4 * (7 * 8 + 5 * 3) * (2 + 7 * 8 + 4 + 8) * 9
    (7 * (2 * 8 + 3 * 3 + 2) * 5) + ((4 * 4 * 3 * 2) * (4 + 3 * 3 + 5 * 8) + (5 + 6) + 4 * 2) + (3 * 3 * 3) * 2
    ((4 * 7 + 9 * 6 * 7) * (6 + 2) + 4) * 5 + 6 * 4 + 2
    2 * 2 * (4 * (6 * 5 + 5 * 6 * 5) + 5 * 6)
    2 * 4 + (3 * (6 + 5) + 5 + 2) + 6 * 3
    6 * 2 + 9 * (4 + 6 * 7 + 6 * 7 + 7) * 2 + 5
    2 * 2 * 9 * (5 * 5 * 9 * 7 * (7 + 5 * 6 * 7 + 7 * 9) + 2)
    3 + 7 + 7 + (9 * 4 + 5 + 2) * 2
    ((7 * 4) * 9 * 4 + 9 + 4 + (8 * 4 + 6 + 2)) + 2 * 5 + 8 + 6 * 5
    6 * 7 + (7 * (3 * 4 * 9 * 5 * 7) * 4) + (7 + 8) * 6 * 7
    (7 + 4 + 8 + 6 + 3) + 8 * 7 * 4 * 6 + 5
    (4 + 4 + 3) * (6 * (7 * 8)) + 9 + (8 * (6 + 2) * 9 + 3)
    6 * (7 * 2 + 4 * (5 * 9 + 3) * 3 * (8 * 2 + 6 + 6 * 9)) + 3
    8 * 7 + 8 + 3 + (7 + 7 * 3)
    ((2 + 9 * 5) + 6 + 8) * 8
    8 + 2 * (3 * 6 * (7 * 7 * 8) + (9 * 5) * 3 * 4) * 6 + 4
    (4 + 7 * (4 * 9) + 4) + 7 * 5 * (7 * (4 * 5 + 2) * 9 + 6 * 7 * (6 * 8)) * 5 + (5 + (3 * 6 + 3 * 3 * 7))
    (3 + (3 * 8 + 2 * 3 + 7)) * 5 * 6 * 8 * 8
    7 + 5 * (7 + 4 * 5 * 7) + 3 + 9 * 5
    ((7 + 8 * 3 * 7 * 9) + 5 * 3 + 9 + (9 * 9)) + 6 + (2 + 7 * (7 * 5 + 4 * 7 * 3) + (5 * 7)) * 2 * 4 + 7
    6 + 9 * (5 * 7) + 9 * 7
    5 + ((8 + 4 * 9 + 3) * (4 + 5 + 6 * 4) * (7 * 2 * 8 + 6) + (8 + 7 * 7 + 9)) * (2 + 8 + 4 + 7) + 5 + 4 + (6 * (6 + 4 * 4))
    5 * (9 * (4 + 3 + 4 * 2 + 5 + 5) + (2 * 9 + 3) * 9 + 8) + 6
    8 * 6 * 9 + 9 + (3 + 7 + (7 * 7) + (5 + 8 + 5 + 5 * 5)) + 3
    4 + 7 * (4 + 9 + 6 + 7 * 9) + (3 * (2 * 8 * 8 + 2 * 7 * 6) * 4 * 6) * 3
    2 + 8 + 9 + 5 + 6 * (8 + 3 + (7 + 8 * 2) + 2)
    7 + 6 * (6 + 3 * 6 + 2 + 8) * 9 + 9
    3 * 6
    (9 * 7 * (4 + 6) * 5 + 8) + 4 * 5 + 5 * (2 + 9) + 3
    7 * 3 + 3 * 6 * 6 + ((8 + 6 * 4 + 5 * 4 * 7) + (5 * 7) * 6 * (4 + 2 + 8 + 5) + 6 * 3)
    7 * 8 + (4 * 3 * 2 * 9) * 6 * (6 * (9 + 7)) + 8
    5 + 5 + 6 + 8 + (2 * 5 + 4 * 6 * 7) + (6 + 9 + 8 + 9 + 7 + 7)
    2 + (7 * (6 + 9 + 2 * 4)) * 7 * 6
    3 + 7 * 3 * (3 + (5 * 6) + 6)
    5 * (6 + 2) + 6 * 3 * 7 * 5
    2 + ((5 + 6 + 9) + 2 + 6 + 4 + 7) + 2 * 5 + 4 + 6
    (6 * 7 * 4 + 2) * 5 * 8 * 3 + 9
    4 * (8 * 6 + 2 * (7 * 2 * 9 * 9)) * 8 * 6 + 3
    7 * (4 * 9) * 7 * 9 + (4 * 9 * (5 * 7)) * 8
    (6 + 6) * 4 + 6
    9 * (4 * 6 + (2 * 7) * (4 * 5) + 7) * 7
    (8 + (6 + 9 * 8 * 2 * 2)) * 6 + 7 * 9
    6 + 7 + 4 * 6 * 2 + (5 + 4 * 3 + (4 * 4 * 8 + 2 * 3 + 9) + (3 * 4 * 9 + 3 * 4) * 2)
    (8 + 5 + 7) + 6
    8 * (5 * 4 * 5) + 7 + (9 + (9 * 3 + 2 + 2 + 5 + 7) + 2 + 7) * (6 + (5 * 5 + 6 + 6 * 2) + 2) * 9
    5 * 2 + 9 + (3 + (3 + 3)) + (4 * 3) * (3 + 3 * (5 + 3 * 5 + 5 * 3))
    2 * 8 + 4 * (2 + 6 + (6 * 8 * 8) * 7) + 3
    (7 + 8 * 4 + 6) * (9 * 5 + (9 + 6 * 2 + 2) + 6) * 7 + 4
    (8 * (3 + 3 * 8)) * (4 * (7 * 6 * 2 + 9 + 8) + (8 * 5 * 5 + 8) * 5) + 8 + 7
    (4 + 4) * 7 + 7 + 9 * 2 + 4
    6 * 5 * 3 * 4 + ((6 + 7) * 6 + 2) * 2
    3 * ((7 + 4 + 6 * 9 + 6 * 8) * 5 * 4)
    2 * (9 * 3 * (2 * 8 * 7 + 3 + 8) + 5 + 5) + 8
    4 + 8 * 5 * 4 * 3 + (2 * 3 + 8 + 7 * 6)
    2 + 3 * ((3 + 4 * 6 + 6 + 8) * 2) * ((3 * 5 * 5) + 7 * (5 * 6 * 3 + 6) * 2 + (4 + 5 * 7) + 2) + 9 * 6
    3 * (9 * (9 + 9 * 6 * 8) * (3 + 7 * 5 * 7)) * 7 * 4 + 2 + 9
    4 + 6 * 5 + ((3 + 7 + 6 * 6 + 5 + 6) + 4 + 2 * 6 + 4 * 3) * 4 + 2
    2 * 9 + 2
    4 + 7 * (4 + 3 + (4 + 7) * (4 * 2))
    (8 + (7 * 4 * 8 * 2 * 4 * 6) + 6 * 5 + 9 * 3) + 2
    4 + 2 * (6 * 6 * (8 + 7 + 2 * 2 + 4 * 6) + 3 * 7)
    7 * 9 * 9 * 5
    (8 * 2 * (6 * 5 + 6 * 9 * 5 * 3) + 7) + 7 * 2 + 5
    6 + (4 * 6 * 5 * 9) + 8 + ((3 * 7 + 5 * 2 * 2 + 5) * (6 * 5 * 9 * 5) * 8)
    (3 + (3 * 2) + 8 + 7) * 4
    (7 * 3 * 4 * 6 + 7 * 3) * 6 * 4 * 7
    3 * (3 + 4 * 4 + 9 * 7 * 8) * 9 * (4 + 3 * 8 + (7 * 7 * 4 * 4 * 2))
    9 * 6 + 4 + 6
    4 * 7 * ((8 * 3) + 3 * 7) * 7
    5 + (4 * 5 * 4 + 8) * 8 + 5 * 2 + 7
    3 + ((5 + 7 + 7 * 2) * 4 * 2 * 5 + (3 * 9 * 5 + 7) + (7 + 3)) + ((9 + 4 + 6) * 9 + 3 + 3 + 9 + (2 * 9 + 8))
    3 * 6 * 4 * (4 * 7 + 6 + 4) + (4 * 5 + (7 + 6 + 3 + 8 * 5 + 2))
    6 + (4 + 5 * 7) * (8 + 2) + 2 + 4 * 8
    (6 * (4 + 2) * 2 * 8 + 9) * 5 * 5 * 5 * 2 + 2
    3 + 2 + 6 * 8 + 2 * ((3 + 3) + 4)
    (4 * 7 + 2 * 9 * (8 + 9 + 2) + (7 * 5 + 4 + 6)) * 9
    9 + 4 + (3 + 5 + (6 * 9) + 6) + 8 + 3
    3 * (7 + 3 + 9) * (7 * 4 * 4 + 6 + 5) * 2 + 2 * (6 + 9)
    3 * ((3 * 9 * 4 + 9) + 9 * (7 + 7 * 5 + 8 + 8 * 7) + (2 * 4 + 7 + 5 + 6) * (2 * 4) * 8) * 5
    7 + 3 * (7 + 3 + 8 * 7 * 3 * 5)
    8 + ((6 + 2 + 8 * 4) * 8 * 5) + 6 + 7
    2 + 8 + 3 * 9 + 8 * 3
    (3 + 2 + 5 * 8 + (4 * 7 + 2 * 4) + 3) + 2 * (5 * 7 + 7 * 6) + 2 + 9
    2 + 7 + (3 + 6) * 5 * (2 + 5 + 6 * 9)
    4 * 4 + 5
    (9 + 3) * 3 + 9 * 3
    (9 + 8 + 2) * (9 * (4 + 3 + 9 + 3))
    7 * 7 + 8 * 9 * 2
    9 + 3 * 7 + 8 * 9
    (8 + 9) + 2
    3 * ((6 * 6 * 9) + 5 + 2 * 8 * 6 + (5 * 2 * 5 * 6 * 4)) + 5
    5 * ((8 * 5) * 8 + 4 * (9 + 6 * 6 * 4 + 9)) + (4 * 6 * 5 + 5 * 3) + 3 * 2 + 3
    6 * (8 * 9) + ((7 * 4 * 7 + 6 * 8 + 3) * (2 + 9 + 7) + 5 + 6) * 5 + 9 * 7
    5 + 9 * 3 * 3 * (4 * 4)
    9 * ((8 + 5 + 2) + (4 + 4) + 8) + ((8 + 6 * 9 * 2 + 2 + 6) * 9 * 8 * 7 * 9) + 9 + 3 * 7
    8 * 2 + 3 * 4 + ((4 + 4 * 4 + 6 * 8 * 5) + (8 * 2 + 6 + 4))
    7 + 5 + 7 + (3 * (9 * 7 * 8) * 6 * 3 + (5 + 8 * 8 + 2)) * (9 * 7 * (4 * 6 + 4 + 7 + 7 * 7) * (5 * 3 + 8) + 7) * 6
    (2 + (6 * 2 + 5 * 8 * 2) * 7 + (2 * 8)) * 9 * (2 * 5)
    3 * (5 * 4 * 9 * 7) + 2 + 2 * 9 * (6 + 8 * 6 * 5 + 4 * 2)
    (2 * (6 + 9 * 4) * 8 * 8 + 5 + (7 * 9)) + 4 * 9 * 9
    3 + (3 * 3 + 2)
    7 + 9 * 2 + (5 * 3 + 8 + (2 + 5 + 9 * 7 * 5))
    2 * (8 * 4 * 7 + 2 * 6 * 8)
    3 * 9 * (4 * (3 * 9 + 3 * 7 + 9 + 8)) * 8 * (2 * 6)
    6 * 7
    9 * 5 + (7 * 4 * 2 + (7 * 9 * 9 + 9 * 8) * 8 * 5) * 8
    ((2 + 2 * 8) + 8 * (9 * 9 + 7 * 7 + 4 + 5) + 3) + 4
    7 + 7 + 5 * (4 + 3 * 9) + 7 + 8
    4 * 4 + (4 * 5 + 7 * 9 * 3) * 5
    (9 * 4 * 7 * (7 + 7 + 6) * 3 + (9 + 4 + 5 * 8 * 4)) + 2 * 5 + ((6 + 6 + 9 * 3) * 8 * 2)
    8 + (8 + 3 * (3 + 4) + 8) + 4
    ((3 * 8 * 3 + 8 * 2) * 9 + 3 * 5) * 4 * (5 * 4 + 3 * 3 + 4) + 2 + 9
    5 * 6 + 4 * 6
    (4 * 7) + 2 * (9 + (9 * 7 + 2 + 6) + 6) + 4
    8 * (9 + 7 * 9) + 4 + 2 + 6 * 7
    (8 + 9 * (3 + 7 + 2 * 6 * 7 + 6) + (3 * 3 + 4 + 8 * 4) * 3 * 3) * 5 * 7 + 7 + (8 + 7)
    6 * (8 + 8 * 5 * (5 * 5 + 3 * 9 + 8) + 6) + (7 + 8 * 7)
    (2 * (5 + 6 + 5) * 9 + (6 * 5 + 4) * 3 + 8) * 4 * (6 + 8 * 4 + 5) + 6 + 9 * 9
    (9 + 5 * 5) * 2 * 5 + 8
    3 + ((6 * 9 * 7 + 4 * 2 * 6) + 5 * (8 * 3 * 3 + 6))
    6 * 6 + (5 * 6)
    (6 * (8 * 9 + 3) * (2 + 7) + 5) * 7 * 8 * 8 * 2 * 9
    2 + 5 + (5 * 4 * 6) + (5 + 2)
    8 + 9 + 8 * 9 + (8 * 8 * 3 + 7)
    7 * 7 + 9 * ((9 + 9) * (4 + 5 * 7 * 7 + 5) + 4) * 3 + (5 * (2 * 5 * 8 + 2) * 2 + 6 + 2)
    8 * ((7 * 8) * 2 + 3 + 3 * 6)
    4 + (2 + 9) + 9 * (9 * 7 + 3 + 6 * 6 * 4) * 8
    5 * 5 * 6 * 3 * ((7 + 8 + 6 + 7) + 2 * 8 + 5 + 6 * 9)
    (9 * 4) + 2 * 2 * (2 * 9 * 8 + 5)
    8 * ((5 * 5 + 9 + 6 * 4 + 3) + 7 + 9 * 4 + (8 + 4 + 8 + 6 + 9) + 2) + 2 + 8
    9 * 9 * (3 * 3 * 5) * 7
    6 + (4 * 3) * 2 + 3 * ((8 + 6 * 9) * (7 * 7))
    6 * 8 + 2 * 6 + 8 + 2
    ((4 + 4 * 2 * 5 * 9 * 6) + 4) * ((2 + 7) + 3 + 4) + 4 + (8 * (5 * 8 + 2 + 8)) * 5 + 3
    ((9 + 4 + 9) * 2 + 3 * 5 + 5 * 6) + 8
    8 * (4 * (5 * 2 + 4 * 4 * 5) * 9 * 4 * 9) * (8 + (4 * 4 + 7 * 9 + 8) + 8 + 4) * (9 + 9) + 3
    (5 + (6 * 6 * 7 * 4 + 7) * 4 * 3) * 3
    (6 * 5) + 5 + 8 * (7 + 2 + 6 + 4 * 8) + 2
    4 * 8 * (7 + 7 * (7 * 6) * 2) * 4 * 3 * ((9 * 2 * 2 * 6 * 2) + 5 + 9 + 8)
    (9 + 9 * 4 * 9 * 9 + 2) * 3 + 2
    3 + (3 * 7 + 9 * 2) + (5 + (5 + 8) + 6)
    8 + 3 * (7 + (8 * 9) * 4 + 8 + 6)
    5 + 5 + (8 + 6) + (5 + 9 + 8) + 7 + (9 * (6 * 4 + 7 + 9 + 3) + 4)
    7 * 5 + 3
    4 + 6 * (6 * 3 + (5 * 2 + 6 + 2) * 2)
    9 + (3 + 2 + 4 + 5 * 7)
    (7 + 5 * 6) + (3 + 6) * (5 * 7 * 8 + 5 * 7 + 4) + 3
    6 + 9 + (5 + 7 * 2)
    6 + (9 + 6) + 4 + (6 + 3 + (6 * 5 + 2 * 9 + 4) * 3 + 3 * 7) * (6 + (6 * 2 * 7))
    4 + (2 * 4 + 4 + (7 + 7 + 4 * 7 + 9 * 5)) + (8 * 3) + 9
    (9 + (8 * 5 * 5 * 2 + 4) + 6 * 2 * 9) * 9 + 4 * 6 + 7 + 2
    8 + 3 + 9 * (8 * 4 * (8 + 6) + 7 * 2 + 8)
    8 * 8 + 4 + (3 * (8 + 7) + 5 + 3 * (2 * 4 * 8 + 2) * (9 + 5 + 3 * 9 + 7 + 9)) + 9
    7 * (3 * 4) + 2 * ((5 + 3 + 6 * 2 + 9 * 2) + 2 * 4 + 6 + 7 + 3) + 3 + 2
    (8 * 8 * 4 + 3 * (2 + 8 * 3 * 5 * 7) + 4) * 9 + 8
    2 * (7 * 9 * (4 + 4 + 7 * 7 + 6 * 7)) + (7 + 9 + 8 + 4 * 2 * 9) + 7 * 8
    (4 + 5 * (3 + 6 * 8 + 7 * 7) * 8 + 2) * 5
    9 * 5 * 2 + (7 + (9 * 8 * 3 + 9 + 4) * 9)
    6 + 2 + 2 + 6 * (2 + 5 + 9 + 5) + 3
    4 * 2 * (4 + (6 * 4) + 4 + 6 + 5) + 2 + 3 + 4
    8 * (9 + 7) + 2 + 4
    ((7 * 9 + 6 * 5) * 5 + 9) + 3 * 6 + (2 + 5) + (7 + (7 + 4 * 3 + 7) + 2 + (5 * 4) + 8)
    (8 + 2 + 3) * (8 + 9 + (3 + 6) + 7) + 8 + 6 + (9 * 7 * 6 * (5 * 6 + 6 * 2 * 2 + 9) + 2 + 5) + 6
    6 + (4 * (4 + 6 * 3 * 5 + 7) * 7)
    7 + (3 + 3 + 9 * (9 * 9) * 8) * 6 * 3
    4 * 2 + (4 * 2 * (3 + 9 * 7 + 3 + 9) + 6 + 8) * 8 + 5 + 7
    4 + (9 + 2 * 7 + 7 + 2) * 4 + 6 + 3 * 5
    3 * (9 + 7 * 7 * 6)
    6 + (7 * 3 + 4) * (7 + 7 * 5 + (8 * 6))
    8 * (2 * 7) * 8 + 2 * 8
    5 + (8 * 6)
    2 * 6 * (9 * 7 + 8) * 7 + (4 * 2 + (9 * 4 + 2 + 2 + 5) * 6)
    (3 * 6 * 9 + 9 + 8 + 2) + 7
    ((3 + 8) + 6) + 6
    ((2 + 4 * 4) * 6) + (5 + (9 * 2 + 4 * 5 + 8 + 4) * (4 + 4 + 8 * 8)) * 6
    3 * 3 * (7 * 2 + 9 * 2 + 8 + (4 + 4))
    (5 + 9 + 5 + (3 + 5 * 5)) * 5 + (9 * (6 + 8 + 6) * 6 * 7)
    2 + (4 * 7 * 3) + 9 * 5
    8 + 9 + 3 * 6 + 6 + (4 + 8 + (7 * 3 * 7 * 6 * 7 * 7) + 9 * 2)
    2 + 5 + (4 + (6 * 6 * 9) + 4 * 3) * 2
    (5 + 6 + 6 * 8 * 9) + 9
    5 * 7 + 4 * 9 + 4
    (3 + 4 + (8 + 9 + 4 * 3) + (4 * 3) + (9 + 6 * 4 * 6 * 6 + 7) + 2) + (4 + 4 * 9 * 4 * 3) + 2 * 9
    7 * 3 * 8
    (3 + (3 * 8 * 2 + 5) + (3 + 3 * 6 + 7 * 8) + 9 + 6) * 5 * 6 * 2
    8 + 9 + (5 * 3) * (6 + 6 + 7 * 2) * 8
    5 + 2 + (8 * 4 + 3 * (6 + 6 * 5 * 3 * 6) + 6) * ((8 + 3 + 6 * 6) * (3 * 2 * 3 * 6)) * 5
    (8 + 7) * 3 + (7 * 8 + 4 * 5 + 4) + (9 + 9 + 3 + (9 * 8 + 9) * 6 * 9)
    (4 * (3 * 6) + 8) * (6 * 2)
    (5 + 5) * 7 + 7 + (4 + 9 * 4 + 2) * 9
    6 * 2 * (5 + 2 * (4 * 8 + 6 + 5 + 3) + 6 + 2 + (5 + 9 + 9 * 7 + 6)) * 4 * (7 + 6 * 9 * 8 + 2 + 4) * 3
    (6 * (5 + 4 + 8 * 6 * 7 + 5) + 5 + 7 + 9 * 2) + 2 + (3 * (7 * 2 + 8) * 5 + 8 * 5 * 6) + (2 + (4 + 2 * 4 * 3))
    6 + 3 + (4 * 2 * 3 * 6 * 3 + 9) * 6 + 8
    5 * 5 * (4 * 6 * 8 + (2 * 3 * 7 + 4 * 6)) * 7 + 4 * 4
    4 + 6 + 3 * 2 * (4 + 4 * 6 + 5 * 3) + 5
    3 + 4 + 4 * 3 + 6 + (3 * 4 * 3)
    8 + 7 + (6 + 3 * 3 + 2 * (8 + 7 * 2 + 6 + 8) + 5) + 2 + (8 * 7 + 2) * 2
    7 * 7 + 6 + 9 * 7 * 6
    6 + 7 + ((5 + 7 * 5 * 9) * 5 + 3) + 6
    6 + (6 + 3 + 6) * 7 * (6 + 8 * 7 + 9 + 4) * ((4 + 9 + 5 + 9) + 2 + 9 * 7 * 6 + 7) + 7
    (3 + 9 * 7 * 3) * 6 + 6 * 2
    5 * 7 + (6 + 7 * 5 * 5 * (9 + 9 * 2 + 8 * 5 * 6)) * 8 * 8 + (9 * (8 * 3 * 7 * 6 + 2 + 2) * 9 + 6 * 4)
    3 + ((9 * 5 * 6) + 2 + (9 + 8 * 4 + 9 + 6) + 9 * 8 + 5) + 4 + (3 + 8 * (7 * 5 * 7 * 2 + 5) * (7 + 5 * 5 + 6 * 5 + 5) * 9)
    (9 + 2) * 8 * 3 + (3 + 8)
    7 + (6 + 2 + 8 * 8 * 3) + 6 + 5 + 6
    (4 + 9 + 4 * 4 + 4) * 9 + ((8 + 9) * 6 * (4 * 5) + (8 + 8 + 7 + 2 * 8) * (5 + 7 + 8)) + 9 + (6 + 6 * 9 + 8 + 5 + 5)
    (9 + 9 * 7 + (8 * 4 + 5)) * (2 + 3 * 5 + (4 + 4)) * (9 * (5 * 6 * 2 + 7 * 3 + 5) * 7 + (3 + 9 + 3) * (4 + 2 * 9 * 6 + 5)) + (3 * 6) + 5 + (5 * 4 + 6 + 8)
    ((2 + 5 + 7 * 9) + 7 * 7 + 3 * 6) + (9 + 6 + (7 * 9 + 8 * 7) + 6 * 4 + 7)
    9 + (4 * 6 * 2 * (5 + 9 + 8 + 3 + 2 * 6))
    6 * 5 * (5 * 9 + 5 + 3) + 9
    (4 + 6 + 3 + 4) * (9 * 5) * 9 * 4 * 3 * (3 * 8 * 6 + 4 + 8)
    ((3 + 2 + 2 * 9 + 3 + 8) * 3 + 5 * 3 + 7 * 5) + 5 * 5 + ((9 * 9) + 5 + 2 * 7) + 5
    9 * 7 * ((6 + 3 * 8) + 8) * 5 * 2 * 2
    (9 + 2 * 5 + (9 + 6 + 3 + 2 * 7 + 9) + (3 * 5 + 7) + 5) + (9 + 6 * 9 * 3) + (4 + 5 + 8 * 2) * 3 + (6 * 4 + (8 * 2 + 5 * 2 + 7) * 2 + 7) * 3
    5 * 9 + 6 * (3 + 3)
    4 * 8 * 9 * 5 * 3
    9 * 8 * 6 * 3 * ((2 * 4 * 6 + 8 + 7) + (6 * 8) * 3 * 5) * 5
    2 + 2 * (7 * 4 * 2 * 3)
    8 * (6 + 8 * 7) * 3 + 2 + 5 * ((6 * 7 * 7 * 7) * (5 + 6 + 5) * 6)
    5 + (6 * 6 * 7 * 3) + 5 + 7
    (5 + (6 * 8 * 5 + 6)) + 7 * 4 + 2 * 2 + 4
    2 + (4 * (4 + 5 * 9 * 9) * 3)
    9 + (6 + 2 * (9 + 7 * 4) + 6) * 7
    6 + 9 * ((4 * 6 * 9 + 5) + 2 + (7 * 7 * 7 * 6 + 6) + (2 * 5 * 6 + 8 + 7 * 5) + 4) * 2
    (9 + (7 + 5 * 4 + 3)) + 8 + 7 + 9 * 5
    ((6 * 2 * 4) * (4 + 7 * 2 * 6 + 7 + 3)) + 9 + 3 * 5 * 7 + 4
    ((3 * 8 + 8 + 8 * 9) + 4) * 7 * 8 * (9 * 6 * 3 + (8 + 7 * 9 * 9 * 7 * 6) + (6 * 2 * 4 * 9 + 9 * 9)) * 5 + 9
    4 + 8 * 6 + (7 * 2 + (6 + 3 + 5 * 2 + 2) * 2 * 5) * 7 * 2
    (4 + (8 + 5 + 3 + 7 + 7 * 5) * 8) + (4 + 6 + 7 * (3 * 8 * 6) * (4 * 4))
    (6 + 2 + 2 * (7 * 3 + 9 * 7 + 2)) + 3 + 5 + (4 + 9 * 8 * 7) * 3 * (7 * 4 * 2 + 7)
    8 * 8
    (8 * 5 + (3 + 2) * 9 + 9 + 3) * 5 + 4
    (4 * 6 + 3) * 5 + (9 * 5 * 7 + 5 * (7 + 6 * 4 + 6) + 4)
    (9 + 3 + (8 * 2) * 7 + 7) * 4 * 6 + 7
    (6 * 3 + (2 * 6 + 2) + (7 + 7 + 3 * 7 * 6) + 6 + 2) + (6 * 3 * 5)
    6 * 5 * (2 * 5 + 9 * (4 + 2 * 6 * 4 + 5 * 2) + 5) + 6 + (4 + (3 + 2 + 2 * 5 * 2) + 8 + 5 * 2 + 5)
    ((5 + 9 + 2 + 7 + 4 * 9) * 9 * 3 + 8 + 2 * 8) + ((7 * 5 + 7 + 3 * 7) * 8 + 2) + 5 + (5 + 8 + 4 + 6) * (5 + 8 + 2)
    5 + 3 + (9 + 4 + 6) * 8 + 8
    2 + (2 * 4 + 7 + 9) * (7 * 4 * (2 * 5 + 2) + 3) + 8 * 6
    7 + (2 + (5 * 7 + 8 * 4 * 5) * 9 + 8 * (3 * 3)) * (6 + 6 * 2 + 4) * 9
    ((9 * 5 * 7 + 4 + 8 + 9) + 9 + 4 + (8 + 4 * 8 + 6 * 7 * 3)) * 2
    5 + (5 + 6 + 7 + 5 * 8 * 6) + 5
    (4 * 5 + 8 + 5) * (8 + 2 + 8 + 4 + 4) + 6
    5 + 4 * 8 + 7 + 4 * 4
    3 * 7 + 3 + 9 * 7 * (6 * 2 * 8 + (2 + 2 + 4))
    8 + 9 + 4 + (8 + 7 + 5 + (6 + 8 + 4 + 4 * 3 * 6) * (3 + 3 * 4 * 5) * 9)
    4 + (4 + 9 * 3 * (4 + 6 * 5 * 8 * 7)) + ((8 + 6 * 2) + 8 + 5 + 8) * ((2 + 9 + 8 * 5 + 3) + 5 + 5) * 3
    3 * (7 + 5 + 3 + 7 * 5) + (7 + 6 + 2 * 8 + (3 * 7 + 2) + 6)
    (2 + 6 + 9) * 9 * 3
    8 + (2 + 2) + 2
    5 + (7 * 2 * 6 + 3) + 4 + 7 * 7 + (9 * 5 * 8 * (3 * 9 * 2 * 4 + 6 + 2) + 3 * 4)
    9 * 6 * 8 + (3 + 9) * 6 + 4
    2 * 3 * 5 + 6 + 6 * (4 * 9 + 4 * 6)
    8 * 9 * 9 * ((4 + 7 + 5 + 7 + 2 + 7) * 2 + 2 + (3 + 8 + 6 * 5) * 6 * 6) + 7 + 4
    (8 * 5 * 7) + (5 + 6) * 7 * (4 + 7 * (9 * 4 + 5 * 8 * 9) + 6) + 3 * 7
    3 + 2 + 4 + 7 + 3
    (8 + 7 + 2 * (4 * 7 + 8 + 2 * 6)) * 2 + ((6 * 5 * 5 + 8 * 7 + 3) * (4 * 5) + 3 + 6 + 6 * 8) + 7 * 3 * 5
    2 * (5 * (3 * 4)) + 6 * 8 + 8
    (7 + 9 + 5) + 8 * 3 + (6 + 9 * 3 + 4 + 8) * 8 * 3
    7 * 9 * (3 * (7 * 4 + 9 * 8 + 9) * 7) + (7 * 7 + 5)
    5 * 2 + 8 + 7
    (7 + 3 * 8) + (3 + 6)
    9 + 5 * 6 * 9
    ((5 + 5 + 7 + 6 + 8) + 5 * 7 + 8 + 5 * 8) + 6 + 6 * (9 * 4 + 8 + 7) + 8 * 2
    ((4 * 9 * 3 * 5 + 5) + (4 + 4 + 2) * 6 + 5 * 9 * 8) + 8 * 2 + 8 * 6 * 9
    8 * ((3 + 2 + 7) * 9) + 4 * 2 + 3 * 2
    3 + 9 + 6 + 2 + ((9 + 5 + 3 * 3) + 9 + 8 * 2 * 8 * (3 * 6 + 9 + 3))
    4 * (7 + 8 * 4) * 7 + 7 + 8
    2 * 2 + (3 * 8 + (7 * 5) + 8 * (9 + 5)) + 3 + 9 * (5 * 9 + 9 + 4 + 8)
    3 * 8 + ((2 + 6 + 2 + 9 * 3 + 3) * (3 * 9 * 4 + 6 + 4) + (4 + 9) + 2 * 8 + (4 + 6 + 2 * 7 * 7))
    ((8 * 9 + 6 + 2 + 5 * 7) + 3 * 6 + (8 + 8) + (9 * 6 + 6) * 7) + ((6 * 9 + 8 + 8 + 7 * 9) + 5 + 4 * 4 + 2 + 7) * 8
    5 * 4 * 7 + ((3 * 8 + 2) * (3 + 4 * 3) + 5) * 5 * 5
    4 + 7 * 5 + 6 + 4 * (2 * 9)
    (2 * 3 + 9 * 6 * 9 + 2) + 3 * ((5 * 9) * 5 * 8 + 9) + 9 * 8
    ((9 * 7 * 7 * 2) + 8 + 3 + (6 + 2 * 4 * 3)) + 6 + 6 + 9 + 8
    8 + 3 + (5 * 5 * 3 * 8 + 4 + 4) * (8 + 7 * 8 * 6 + (2 * 4 * 6 + 5 * 6 * 4) * 9) * (3 + 4)
    9 + 3 * ((2 + 8 * 5 + 7 + 8) + (5 + 3 + 5) + 6 * 6 * 4) * (7 + 5 * (5 * 9 + 3 + 6) * 2) + 9
    4 * (8 + (9 * 2 + 2 + 8) * 4 + 7 + 8 * 4)
    7 + 4 * (7 * (7 + 6) + (2 + 9) + (2 + 2 + 9 * 9) * 2) + 8 * 6
    (5 + (3 * 4 * 2 * 7 + 4)) + 5 * (7 + 8 * 5 + 5) * 4 + 9 * 4
    ((4 * 7 * 3 * 4 * 2 * 2) * (6 * 3 + 4) + 4 + 6) * 4
    9 * (3 * (9 + 5)) * 5 + (4 * (6 * 4 + 4))
    (9 + 4 + 5 + (5 * 2 + 4) * 3) * 2 * (9 + 7 * 6 + 7) + 7 + 6
    9 * ((8 + 9 * 7) * 6 * 6 * 4) + 7
    6 + 8 + ((3 + 4 + 2 + 3 * 8 * 5) + 8 + 7) + 6 * 6 * 8
    2 + 9 + 7 * 7 + ((6 + 8) * (6 * 5 * 5 + 8 + 8 + 5) * 8 + (2 + 7 + 8 + 2 + 9) + (8 + 6 + 7 + 5 + 9 + 8))
    7 + (2 + 4 * 5 + (9 * 2 * 8 + 4)) + 2
    3 + 5 * 3 + (8 + 6 * 7 + 7 + 2) + (2 + 2) * 9
    (5 + 7 * 4 * 5) * 8 + 2 * 5 * 9 + 4
    ((7 + 6 + 8 * 9 * 3 + 8) * 8 + (2 + 4 + 7) + 3 * 2) * 5
    9 * (7 + 9 * (7 * 7 * 5) + (2 * 2 * 5) + 4) + 4 * 9 + 6 * 6
    ((7 * 7 * 2 + 4 + 5) + (3 + 3 * 8) * 9 + 7 * (5 + 6 + 3)) * 8
    9 * 8 * 7 * 9 + (3 + (4 + 2) * 8)
    ((9 + 7) * (9 + 5 + 7) * (5 * 9) * 5) * 6 * 8 * 6 + 7
    3 * 6 * 6 + ((7 * 3 + 8 * 7 * 6 + 2) * 5 * 2 + (6 + 4) * 9)
    3 * 5 + (8 * 8 + 7 + 9) + ((5 + 5 + 7) * 3) * 7
    7 + (6 + 5) * 2 + ((2 * 9 * 6 * 4) * (4 + 6 * 3 * 4) + 8 + 2 * 2 * 5) * 6 + 6
    (9 * 2 + 5 * 3) * 7 + (3 * 5 + 6) + 2 + 7
    2 * 3 + 7 * 5 + 6 * 5
    9 + ((4 + 4 * 4 * 6) + 5 * 8) * (2 + 9)
    (9 + 6 * 3 * 8) * 7 * 4
    7 + 3 + (5 + (7 + 2 * 8 + 3)) + (4 * 5 + (7 + 2) + 2)
    (4 + 2 * 6) * 2 * (7 + 5 * 8) + 3
    3 * 7 * (2 + 2 + 4 + (2 + 2 + 6 * 6 * 3) + 8 * 6)
    4 * 2 + 4 * (3 + 7 * 8 + (6 + 4 + 5 + 4 + 7 + 9)) + 3
    5 + ((8 + 4 * 5 * 6) + 4 * (8 * 6 * 7 + 5 * 3) + 5 * 7)
    8 + (2 * (6 + 9 * 7 + 8) * (9 * 2 * 7 * 5 * 8) + 5 + 4) + 9
    8 * (9 + 7 * (8 + 8) * 5 * 2) * (5 + 7 * 6 * 6 * 8 * (7 + 6 * 6)) + 3
    3 * 9 * (7 * (8 * 9 * 9) + 3 * 3 * 9 + (5 * 9 + 7 + 9 * 4)) + 9
    4 + 7
    3 + (2 * 2 + (7 * 3) * 2) + 7 + 4 + (2 + 6 * 4 + 9 * 4 * 5)
    2 * 8 + ((7 + 3 * 3 + 4) * 8 * 8 + 8 + (2 + 3 * 2 + 2 + 5) * 2) + 7 + ((9 * 5 * 2) * 7 * 8) * (4 * 7 * 8)
    2 * 9 * (3 + 5 * 3) * 2 * 9 * 2
    (6 * 7 * 4) * 4 + 8 + (4 * 8)
    7 + 2 + (9 * 4 + 5 * 6 * 7)
    6 * (6 * (9 * 7 + 4 + 8 * 7) * 2 * 8 + 6) * 7
    4 * 4 + 2 + 4 * (9 * 2) + 2
    2 + 7 + 6 + 3 * ((3 + 5 * 4 * 4) + 6 + 8 * 9)
    7 + 4 * (3 + 4 + (3 * 5 + 4 * 2)) + 9 + (5 * 6)
    (4 + 7 + 3 + (4 * 8 * 8 * 7 * 7 * 6)) * (2 * 7 * 8 + 4 * 8) + (9 + 6 * (9 * 8 * 5 + 5) + 2) + 8 * 7 * 6
    (2 + 3 * 7) + (7 + 6 * 5) + 5 * (6 * (4 * 4 * 4 * 6) * 4 * (6 * 7) + 6) + 9 * 7
    6 + 6 + 2 * (6 + 7 + (9 + 9 + 9 * 7 + 7 + 7) + 7 * 5)
    ((2 * 2 + 2 + 4 + 8 + 8) + 3 + 6 + (2 + 8 + 2 * 5 * 2)) + 7 * 7 * 2 + 6
    4 + ((4 * 8 * 9) * 7 + (2 * 2 + 7 + 6 + 8 + 5) * 4 + 5 + 8) * 5 * 2
    8 * (5 * 5 * 4 * (9 * 9 + 8 + 6 + 9 + 3) + 8 * 7) * 4
    9 + ((9 * 3 * 4 * 2) + 6) + 8 + 4 * 9 * 7
    2 * 8 * 2 * ((2 * 8 * 3 * 5) + 5 * 2 * 7 * 2) + 4
    (2 + (6 + 6 + 7 + 9 + 9 + 7)) + 7 + 3 + (6 * 3 * 5 * 8) + 9 * 2
    2 * 5 * 2 + 5 + 2 + ((9 + 7 + 6) + 7 + 2 + 2 * 2)
    5 * 4
    (3 * (9 + 5) + 3 + 4 + (7 * 6 + 6 * 6)) * 8 + (6 + 2 * 8 * (6 + 6 * 7 * 3 + 5) + 3 + 5) * 3 * 7
    5 * (4 * 2) + (5 * 7 + 4 + 2) * 6 + (2 * (6 * 8 * 3 + 5) + 8) + 8
    9 * 2 + (7 * 5) + 2 + (9 + 4)
    """
}
